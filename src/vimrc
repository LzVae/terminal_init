" TODO: 
"   - source insight mode(like taglist)
" Dependencies: 
"   - Interface: python3 , Lua , pylint
"   - util: ctags , cscope
"   - plugin: MephistoMMM/molokai


" Space&Tabs-----------------------------------
set tabstop=4  " tab setting
set expandtab   " Tabs are spaces
set smarttab
set shiftwidth=4
set softtabstop=4
set autoindent 
set smartindent
autocmd FileType python setlocal et sta sw=4 sts=4
autocmd FileType html,css,javascript setlocal et sta sw=2 sts=2
autocmd FileType yaml,snippets setlocal et sta sw=2 sts=2


" FileType-----------------------------------
" set .rs file is rust
au BufNewFile,BufWrite,BufRead *.rs set filetype=rust
au BufNewFile,BufWrite,BufRead *.snippets set filetype=snippets
au BufRead,BufNewFile *.asd set filetype=lisp


" Special--------------------
set autoread    " When a file has been detected to have been changed outside of Vim , automatically read it again.
set nocompatible  " Use Vim defaults instead of 100% vi compatibility
set backspace=2   " more powerful backspacing
set mouse=a     " allow mouse
set scrolloff=10 " 光标在屏幕倒数10行时自动向下移
"set clipboard=unnamed " Can command v to other place
set noerrorbells " No noisy error bell
set visualbell
set vb t_vb=
set tm=500
set tags=tags " while save tag file
let mapleader = "\<cr>"


" Folding-----------------------------------
set foldenable " Enable folding
set foldlevelstart=10 " Open most folds by default
set foldmethod=syntax " Fold based on syntax level
set foldnestmax=10 " 10 folds max


" Search------------------------------------
set hlsearch  " Highlight search things
"set ignorecase " search时忽略大小写
"set smartcase  " search时，如果搜索命令中有大写，则记入大小写


" No backup--------------------
set nobackup
set nowb
" set noswapfile

          
" Encoding--------------------
" English messages only
"language messages zh_CN.utf-8
set fencs=utf-8,gbk,chinese,latin1
set formatoptions+=mM
set encoding=utf-8


" UI Config-----------------------------------
set number
set relativenumber
set ruler
set rulerformat=%15(%c%V\ %p%%%)
" 命令行于状态行
set ch=2
set ls=2 " 始终显示状态行
set wildmenu " 命令补全， 显示补全菜单
set showcmd  " 右下角显示已输入的命令
" tag page
set tabpagemax=9
set showtabline=2
set cursorline " highlight the line which cursor on



" Key Shortcut-----------------------------------
map k gk
map j gj
" -----------------------------Normal-------------------------------"
"  <C-]> to jump among files
"nnoremap <C-t>   :tabnew<cr>
"nnoremap <C-p>   :tabp<cr>
"nnoremap <C-n>   :tabn<cr>
"nnoremap <C-c>   :close<cr>
"nnoremap <leader>bd   :bd<cr>
"nnoremap <leader>bn   :bn<cr>
"nnoremap <leader>bp   :bp<cr>
nnoremap <C-p> :bp<cr>
nnoremap <C-n> :bn<cr>
" close tag
nnoremap <C-c> :close<cr>
"nnoremap <C-c> :bd<cr>
" jump among windows
nnoremap <C-j>   <C-W>j
nnoremap <C-k>   <C-W>k
nnoremap <C-l>   <C-W>l
nnoremap <C-h>   <C-W>h
" split window
nnoremap <silent> <leader>wv   :vsp<cr>
nnoremap <silent> <leader>wh   :sp<cr>
" no height
nnoremap <silent> <leader>nh   :noh<cr>     
nnoremap <silent> <C-f>   :NERDTreeToggle<cr>
"nnoremap <silent> <C-g>   :UndotreeToggle<cr>
nnoremap <silent> <C-g>   :TagbarToggle<cr>
" go into source insight mode
nnoremap <silent> <leader>ts :! ctags -R && cscope -Rbq<cr>
" go into source insight mode Plus
map <leader>th  :sp tags<CR>:%s/^\([^	:]*:\)\=\([^	]*\).*/syntax keyword Tag \2/<CR>:wq! tags.vim<CR>:noh<CR>:so tags.vim<CR>
map <leader>tl  :so tags.vim<CR>
" -----------------------------Normal-------------------------------"
"
" -----------------------------Insert-------------------------------"
inoremap <C-j> <ESC>o
" -----------------------------Insert-------------------------------"
"
" -----------------------------Visual-------------------------------"
" paset cover a visual region
vnoremap P dp
" -----------------------------Visual-------------------------------"
"
" -----------------------------Exec-------------------------------"
" -----------------------------Exec-------------------------------"


" edit .vimrc file conveniently , <leader>e to edit .vimrc
map <silent> <leader>e :e $HOME/.vim/vimrc<cr>
" auto source .vimrc after writing the buffer
autocmd! bufwritepost .vimrc source $HOME/.vim/.vimrc


"for ultisnips
filetype off
" ------------------------------------------------------------------------------
" ---------------------------------Plugin Manager-------------------------------
" ------------------------------------------------------------------------------
" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" " alternatively, pass a path where Vundle should install plugins
" "call vundle#begin('~/some/path/here')
" " let Vundle manage Vundle, required
" Plugin Manager
Plugin 'gmarik/Vundle.vim'
" commonlisp
" Plugin 'kovisoft/slimv'
" rust
" Plugin 'rust-lang/rust.vim'
" |-------------------go----------------------------|
" go
Plugin 'fatih/vim-go'
" when your change your GOPATH or start a new project , exec: 
"   go get -u github.com/nsf/gocode 
Plugin 'nsf/gocode', {'rtp': 'vim/'}
" a local func jamp
"     go get -v code.google.com/p/rog-go/exp/cmd/godef
"     go install -v code.google.com/p/rog-go/exp/cmd/godef
Plugin 'dgryski/vim-godef'
" python
" Plugin 'klen/python-mode'
" |-------------------------------------------------|
"
" |-------------------docker------------------------|
" dockerfile syntax
Plugin 'docker/docker' , {'rtp': '/contrib/syntax/vim/'}
" |-------------------------------------------------|
"
" |-------------------nginx-------------------------|
" nginx syntax 
Plugin 'evanmiller/nginx-vim-syntax'
" |-------------------------------------------------|
"
" |-------------------comman------------------------|
" buffer plus
Plugin 'MephistoMMM/buffer-plus'
" tags bar
" https://github.com/majutsushi/tagbar
Plugin 'majutsushi/tagbar'
" auto mkdir
" https://github.com/vim-scripts/auto_mkdir
Plugin 'vim-scripts/auto_mkdir'
" https://github.com/tpope/vim-abolish
" :Abolish 
" :Subvert(or just :S) more powerful than s
" map  cr(s|c|u|m|...)
Plugin 'tpope/vim-abolish'
" molokai
Plugin 'MephistoMMM/molokai'
" neocomplete
Plugin 'Shougo/neocomplete.vim'
" Track the engine.
Plugin 'SirVer/ultisnips'
" Snippets are separated from the engine. Add this if you want them:
Plugin 'honza/vim-snippets'
" 注释
Plugin 'scrooloose/nerdcommenter'
" 文件树
Plugin 'scrooloose/nerdtree'
" add surrounding char for a word
" ys -> create surround  + range [iw, aw, i], i), i", i', ip] + sigal
" cs -> change surround  + origin_sigal + new_sigal
" ds -> delete surround  + sigal
Plugin 'tpope/vim-surround'
" rename {new name}
Plugin 'danro/rename.vim'
Plugin 'bling/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
Plugin 'easymotion/vim-easymotion'
" 括号
Plugin 'MephistoMMM/auto-pairs'
" undotree
" Plugin 'mbbill/undotree'
" check code syntax
Plugin 'scrooloose/syntastic'
" airline to find git branch
" https://github.com/tpope/vim-fugitive
Plugin 'tpope/vim-fugitive'
" select the closest object among a group of candidate
Plugin 'terryma/vim-expand-region'
" |-------------------------------------------------|
"
" |-------------------------js----------------------|
" jsfmt :
"   it dependence: npm install -g jsfmt
"Plugin 'mephux/vim-jsfmt'
" js更漂亮
Plugin 'pangloss/vim-javascript'
" |-------------------------------------------------|
" 
" |-------------------------markdown----------------|
" markdown
Plugin 'godlygeek/tabular'
Plugin 'plasticboy/vim-markdown'
" |-------------------------------------------------|
"
" " All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required
" " To ignore plugin indent changes, instead use:
" filetype plugin on
" "
" " Brief help
" " :PluginList       - lists configured plugins
" " :PluginInstall    - installs plugins; append `!` to update or just
" :PluginUpdate
" " :PluginSearch foo - searches for foo; append `!` to refresh local cache
" " :PluginClean      - confirms removal of unused plugins; append `!` to
" auto-approve removal
" "
" " see :h vundle for more details or wiki for FAQ
" " Put your non-Plugin stuff after this line
"

" -------------------for airline------------------------------"
let g:airline_powerline_fonts = 1
let g:airline_theme = "murmur"
let g:airline#extensions#branch#enabled=1
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#left_sep = ' '
let g:airline#extensions#tabline#left_alt_sep = '|'
let g:airline#extensions#default#layout = [
      \ [ 'a', 'b', 'c' ],
      \ [ 'x', 'y', 'z', 'warning' ]
  \ ]
function! AirlineInit()
    let g:airline_section_a = airline#section#create(['mode', '❀  ', 'branch'])
    let g:airline_section_b = airline#section#create_left(['%{getcwd()}'])
    let g:airline_section_c = airline#section#create_left(['file'])
endfunction
autocmd User AirlineAfterInit call AirlineInit()
" -------------------for airline------------------------------"
"
" -------------------for markdown------------------------------"
au FileType markdown let g:vim_markdown_folding_disabled=1
au FileType markdown let g:vim_markdown_math=1
au FileType markdown let g:vim_markdown_frontmatter=1
" -------------------for markdown------------------------------"
"
" -------------------for nerdtree------------------------------"
" https://github.com/scrooloose/nerdtree
"
let NERDTreeShowLineNumbers=1
let NERDTreeMouseMode=2
let NERDTreeBookmarksSort=1
let NERDTreeShowBookmarks=1
let NERDTreeBookmarksFile='~/.vim/.NERDTreeBookmarks'
let NERDTreeWinSize=30
" start nerdtree when vim startup if no file is open
"autocmd StdinReadPre * let s:std_in=1
"autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif
"
" close nerdtree if nerdtree is the only window in vim
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
" -------------------for nerdtree------------------------------"
"
" -------------------for auto-pairs-------------------------------"
let g:AutoPairsShortcutJump='<C-l>'
" while file is vim or html ,add '<' complite
au FileType vim,html let g:AutoPairs = {'(':')', '[':']', '{':'}',"'":"'",'"':'"', '`':'`','<':'>'}
" -------------------for auto-pairs-------------------------------"
"   
" -------------------for neocomplete------------------------------"
" https://github.com/Shougo/neocomplete.vim
let g:neocomplete#enable_at_startup = 1
" Disable AutoComplPop.
let g:acp_enableAtStartup = 0
" Set minimum syntax keyword length.
let g:neocomplete#sources#syntax#min_keyword_length = 3
" Use smartcase.
let g:neocomplete#enable_smart_case = 1
let g:neocomplete#lock_buffer_name_pattern = '\*ku\*'
" Define dictionary.
let g:neocomplete#sources#dictionary#dictionaries = {
    \ 'default' : '',
    \ 'vimshell' : $HOME.'/.vimshell_hist',
    \ 'scheme' : $HOME.'/.gosh_completions'
        \ }
" Define keyword.
if !exists('g:neocomplete#keyword_patterns')
    let g:neocomplete#keyword_patterns = {}
endif
let g:neocomplete#keyword_patterns['default'] = '\h\w*'
" Recommended key-mappings.
" <CR>: close popup and save indent.
inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
function! s:my_cr_function()
  "return (pumvisible() ? "\<C-y>" : "" ) . "\<CR>"
  " For no inserting <CR> key.
  return pumvisible() ? "\<C-y>" : "\<CR>"
endfunction
" <TAB>: completion.
inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
" <BS>: close popup and delete backword char.
inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"
" Enable omni completion.
autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd FileType python setlocal omnifunc=python3complete#Complete
inoremap <expr><TAB> pumvisible() ? "\<C-n>" : "\<TAB>"
" Enable heavy omni completion.
if !exists('g:neocomplete#sources#omni#input_patterns')
  let g:neocomplete#sources#omni#input_patterns = {}
endif

setlocal omnifunc=gocode#Complete
" -------------------for neocomplete------------------------------"
"
" -------------------for ultisnips------------------------------"
" https://github.com/SirVer/ultisnips
" Trigger configuration. Do not use <tab> if you use https://github.com/Valloric/YouCompleteMe.
let g:UltiSnipsUsePythonVersion = 3
let g:UltiSnipsSnippetDirectories=['UltiSnips']
let g:UltiSnipsSnippetsDir = '~/.vim/UltiSnips'
let g:UltiSnipsExpandTrigger="<C-k>"
let g:UltiSnipsJumpForwardTrigger="<C-k>"
let g:UltiSnipsJumpBackwardTrigger="<C-;>"

" If you want :UltiSnipsEdit to split your window.
let g:UltiSnipsEditSplit="vertical"
nnoremap <leader>us :UltiSnipsEdit<CR>
" -------------------for ultisnips------------------------------"
"
" -------------------------for go ------------------------------"
" https://github.com/fatih/vim-go
au FileType go nmap <leader>r <Plug>(go-run)
au FileType go nmap <leader>b <Plug>(go-build)
au FileType go nmap <leader>i :GoInstall<cr>
au FileType go nmap <leader>t <Plug>(go-test)
au FileType go nmap <leader>c <Plug>(go-coverage)
au FileType go nmap <Leader>s <Plug>(go-implements)
au FileType go nmap <Leader>gd <Plug>(go-doc)
au FileType go nmap <Leader>gb <Plug>(go-doc-browser)
au FileType go let g:go_highlight_functions = 1
au FileType go let g:go_highlight_methods = 1
au FileType go let g:go_highlight_structs = 1
au FileType go let g:go_highlight_operators = 1
au FileType go let g:go_highlight_build_constraints = 1 
" godef https://github.com/dgryski/vim-godef
au FileType go let g:godef_split = 2
" -------------------------for go ------------------------------"
"
" ------------------------for easymotion ------------------------------------"
"  https://github.com/easymotion/vim-easymotion
" Gif config
map  / <Plug>(easymotion-sn)
omap / <Plug>(easymotion-tn)
"
" " These `n` & `N` mappings are options. You do not have to map `n` & `N` to
" EasyMotion.
" " Without these mappings, `n` & `N` works fine. (These mappings just provide
" " different highlight method and have some other features )
" map  n <Plug>(easymotion-next)
" map  N <Plug>(easymotion-prev)
let g:EasyMotion_smartcase = 0
" ------------------------for easymotion ------------------------------------"
"
" ------------------------for undotree------------------------------------"
" https://github.com/mbbill/undotree
"let g:undotree_SetFocusWhenToggle = 1
"function! g:Undotree_CustomMap()
    "map <buffer> <c-n> J
    "map <buffer> <c-p> K
"endfunction
"if has("persistent_undo")
    "set undodir=~/.vim/undodir/
    "set undofile
    "set undolevels=10000
"endif
" ------------------------for undotree------------------------------------"
"
" ------------------------for syntastic--------------------------------------"
" https://github.com/scrooloose/syntastic
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*
let g:syntastic_error_symbol             = '✗'
let g:syntastic_warning_symbol           = '⚠'
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list            = 1
let g:syntastic_auto_jump                = 3
let g:syntastic_check_on_open            = 0
let g:syntastic_check_on_wq              = 0
" for python
au FileType python let g:syntastic_python_pylint_post_args = '--msg-template="{path}:{line}:{column}:{C}: [{symbol} {msg_id}] {msg}"'
" Syntastic check
nnoremap <leader>sc :SyntasticCheck<CR>
" turns off all error notifiers
nnoremap <leader>sr :SyntasticReset<CR>
nnoremap <leader>se :Error<CR>
nnoremap <leader>lc :lclose<CR>
nnoremap <leader>ln :lnext<CR>
nnoremap <leader>lp :lprevious<CR>
" ------------------------for syntastic--------------------------------------"
"
" ------------------------for vim-expand-region----------------------------------"
" https://github.com/terryma/vim-expand-region
" This selects the next closest text object.
map <SPACE> <Plug>(expand_region_expand)
" This selects the previous closest text object.
vmap <BS> <Plug>(expand_region_shrink)
let g:expand_region_text_objects = {
      \ 'i"'  :0,
      \ 'a"'  :0,
      \ 'i''' :0,
      \ 'a''' :0,
      \ 'i]'  :1, 
      \ 'a]'  :1, 
      \ 'ib'  :1, 
      \ 'ab'  :1, 
      \ 'iB'  :1, 
      \ 'aB'  :1, 
      \ 'il'  :0, 
      \ 'ip'  :0,
      \ 'ie'  :0 
  \ }
" ------------------------for vim-expand-region----------------------------------"
"
" ------------------------for vim colorscheme-----------------------------------"
let g:molokai_original = 1
" ------------------------for vim colorscheme-----------------------------------"
"
" ------------------------for tabular-----------------------------------"
"  https://github.com/godlygeek/tabular
nnoremap <Leader>a :Tabularize 
vnoremap <Leader>a :Tabularize 
" ------------------------for tabular-----------------------------------"
"
" ------------------------for auto close preview--------------------------------"
autocmd CursorMovedI * if pumvisible() == 0|pclose|endif
autocmd InsertLeave * if pumvisible() == 0|pclose|endif
" ------------------------for auto close preview--------------------------------"
"
" ------------------------for buffer plus-----------------------------------"
"  close buffer
let g:BufferPlusSafeCloseMap = "<C-b>"
" new buffer
let g:BufferPlusNewBufferMap = "<C-t>"
" ------------------------for buffer plus-----------------------------------"

" Colors-----------------------------------
syntax on
syntax enable " syntax color
set background=dark
colorscheme molokai
