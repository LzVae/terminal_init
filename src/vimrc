" init.vim
" Maintainer: Mephis Pheies ( MephistoMMM )	
" Email: mephistommm@gmail.com
" Version:	0.1.0
" Last Change: 04 05 2016	
" Introduction:  myself vim config
" Dependencies: 
"   - Interface: python3 , Lua ,
"   - utils: ctags , cscope, pylint, eslint_d
"   - theme: MephistoMMM/gruvbox
" TODO:
"   * buffer-circular-kill rewrite by python3
"   * JavaScript Semantic Completion

" Space&Tabs-----------------------------------
set tabstop=4  " tab setting
set expandtab   " Tabs are spaces
set smarttab
set shiftwidth=4
set softtabstop=4
set autoindent 
set smartindent
autocmd FileType python setlocal et sta sw=4 sts=4
autocmd FileType html,css,javascript setlocal et sta sw=2 sts=2
autocmd FileType yaml,vim,snippets setlocal et sta sw=2 sts=2

" FileType-----------------------------------
" set .rs file is rust
au BufNewFile,BufWrite,BufRead *.rs set filetype=rust
au BufNewFile,BufWrite,BufRead *.snippets set filetype=snippets
au BufRead,BufNewFile *.asd set filetype=lisp

" Special--------------------
" When a file has been detected to have been changed outside of Vim , 
" automatically read it again.
set autoread    
" more powerful backspacing
set backspace=2   
" allow mouse
set mouse=a     
" scroll will move down while cursor at the last 10 line
set scrolloff=10 
"set clipboard=unnamed 
" No noisy error bell
set noerrorbells 
set visualbell
set tm=1000
" while save tag file
set tags=tags 
let mapleader = "\<SPACE>"
" Persistent undo
set undodir=~/.config/nvim/undodir
set undofile
set undolevels=1000 "maximum number of changes that can be undone
set undoreload=10000 "maximum number lines to save for undo on a buffer reload

" Folding-----------------------------------
set foldenable " Enable folding
set foldlevelstart=10 " Open most folds by default
set foldmethod=syntax " Fold based on syntax level
set foldnestmax=10 " 10 folds max

" Search------------------------------------
" Highlight search things
set hlsearch  

" No backup--------------------
set nobackup
set nowb
" set noswapfile
          
" Encoding--------------------
" English messages only
set fencs=utf-8,gbk
set formatoptions+=mM
set encoding=utf-8

" UI Config-----------------------------------
set number
set relativenumber
set ruler
set rulerformat=%15(%c%V\ %p%%%)
" command line and status line
" always show status
set ls=2  
" show command complite menu
set wildmenu 
" show command in lower right corner
set showcmd  
" tag page
set tabpagemax=9
set showtabline=2
" highlight the line which cursor on
set cursorline 

" Abbreviate-----------------------------------
iabbrev lbd λ

" Key Shortcut-----------------------------------
map k gk
map j gj
" go into source insight mode Plus
map <leader>th  :sp tags<CR>:%s/^\([^	:]*:\)\=\([^	]*\).*/syntax keyword Tag \2/<CR>:wq! tags.vim<CR>:noh<CR>:so tags.vim<CR>
map <leader>tl  :so tags.vim<CR>

" -----------------------------Normal-------------------------------"
"  <C-]> to jump among files
"split window
nnoremap <leader>wv            :vsp<cr>
nnoremap <leader>wh            :sp<cr>
nnoremap <leader>wc            :close<cr>
" no height
nnoremap <leader>nh            :noh<cr>     
" search file
nnoremap <leader>ff            :CtrlP<cr>
" search buffer
nnoremap <leader>bb            :CtrlPBuffer<cr>
" toggle tagbar
nnoremap <leader>tb            :TagbarToggle<cr>
" toggle rainbow
nnoremap <leader>tr            :RainbowToggle<cr>
"show hexadecimal coding(hex coding) 
nnoremap <leader>sh            :%!xxd<cr>
"show normal code
nnoremap <leader>sn            :%!xxd -r<cr>
"go into source insight mode
nnoremap <silent> <leader>ts   :! ctags -R && cscope -Rbq<cr>
" edit .vimrc file conveniently , <leader>e to edit .vimrc
nnoremap <silent> <leader>e    :e $HOME/.config/nvim/init.vim<cr>
" -----------------------------Normal-------------------------------"

" -----------------------------Insert-------------------------------"
inoremap <C-j>                 <C-n>
inoremap <C-k>                 <C-p>
" -----------------------------Insert-------------------------------"

" -----------------------------Visual-------------------------------"
" -----------------------------Visual-------------------------------"

" ------------------------------------------------------------------------------
" ---------------------------------Plugin Manager-------------------------------
" ------------------------------------------------------------------------------
filetype off
function! DoRemote(arg)
  UpdateRemotePlugins
endfunction

" Required:
call plug#begin('~/.config/nvim/plugged')

" |-------------------go----------------------------|
" go
Plug 'zchee/deoplete-go',{'do': 'make', 'for': 'go'}
Plug 'fatih/vim-go', {'for': 'go'}
" when your change your GOPATH or start a new project , exec: 
"   go get -u github.com/nsf/gocode 
"   or :GoInstallBinaries
Plug 'nsf/gocode', {'rtp': 'nvim/', 'for': 'go'}
" a local func jamp
"     go get -v code.google.com/p/rog-go/exp/cmd/godef
"     go install -v code.google.com/p/rog-go/exp/cmd/godef
Plug 'dgryski/vim-godef',{'for': 'go'}
" |-------------------------------------------------|

" |-------------------nginx-------------------------|
" nginx syntax 
Plug 'evanmiller/nginx-vim-syntax' 
" |-------------------------------------------------|

" |-------------------comman------------------------|
" buffer plus
Plug 'MephistoMMM/buf-circular-kill'
" rainbow pairs
Plug 'luochen1990/rainbow'
" indentline
Plug 'Yggdroot/indentLine'
" tags bar
" https://github.com/majutsushi/tagbar
Plug 'majutsushi/tagbar'
" https://github.com/tpope/vim-abolish
" :Abolish 
" :Subvert(or just :S) more powerful than s
" map  cr(s|c|u|m|...)
Plug 'tpope/vim-abolish'
" gruvbox
Plug 'MephistoMMM/gruvbox'
" deoplete
Plug 'Shougo/deoplete.nvim', { 'do': function('DoRemote') }
" Track the engine.
Plug 'SirVer/ultisnips', { 'do': function('DoRemote') }
" Snippets are separated from the engine. Add this if you want them:
Plug 'honza/vim-snippets'
" comment
Plug 'scrooloose/nerdcommenter'
" file tree
Plug 'ctrlpvim/ctrlp.vim'
" add surrounding char for a word
" ys -> create surround  + range [iw, aw, i], i), i", i', ip] + sigal
" cs -> change surround  + origin_sigal + new_sigal
" ds -> delete surround  + sigal
Plug 'tpope/vim-surround'
" rename {new name}
Plug 'danro/rename.vim'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'easymotion/vim-easymotion'
" pairs
Plug 'MephistoMMM/auto-pairs'
" check code syntax
Plug 'scrooloose/syntastic'
" airline to find git branch
" https://github.com/tpope/vim-fugitive
Plug 'tpope/vim-fugitive'
" select the closest object among a group of candidate
Plug 'terryma/vim-expand-region'
" |-------------------------------------------------|

" |---------------------python3---------------------|
" python3 more powerful completion
Plug 'zchee/deoplete-jedi', {'for': 'python'}
" |-------------------------------------------------|

" |-------------------------js----------------------|
" js syntax define
Plug 'pangloss/vim-javascript', {'for': 'javascript'}
" vue
Plug 'posva/vim-vue'
" react jsx
Plug 'mxw/vim-jsx'
" |-------------------------------------------------|

" |---------------------haskell---------------------|
" haskell 
Plug 'neovimhaskell/haskell-vim'
" |-------------------------------------------------|
 
" |-------------------------markdown----------------|
" markdown
Plug 'godlygeek/tabular'
Plug 'plasticboy/vim-markdown' , {'for': 'markdown'}
" |-------------------------------------------------|

" Required:
call plug#end()
filetype plugin indent on
"End dein Scripts-------------------------

" -------------------for airline------------------------------"
let g:airline_powerline_fonts = 1
"let g:airline_theme = "murmur"
let g:airline_theme = "tomorrow"
let g:airline#extensions#branch#enabled=1
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#left_sep = ' '
let g:airline#extensions#tabline#left_alt_sep = '|'
let g:airline#extensions#default#layout = [
      \ [ 'a', 'b', 'c' ],
      \ [ 'x', 'y', 'z' ]
  \ ]
function! AirlineInit()
    let g:airline_section_a = airline#section#create(['mode', '❀ ','%{winnr()} ','branch'])
    let g:airline_section_b = airline#section#create_left(['%{getcwd()}'])
    let g:airline_section_c = airline#section#create_left(['file'])
endfunction
autocmd User AirlineAfterInit call AirlineInit()
" -------------------for airline------------------------------"

" -------------------for markdown------------------------------"
au FileType markdown let g:vim_markdown_folding_disabled=1
au FileType markdown let g:vim_markdown_math=1
au FileType markdown let g:vim_markdown_frontmatter=1
" -------------------for markdown------------------------------"

" -------------------for ctrlp------------------------------------"
"  https://github.com/ctrlpvim/ctrlp.vim
"  Use <c-f>, <c-b> to change mode
"  Use <c-j>, <c-k> or the arrow keys to navigate the result list.
"  Use <c-t> or <c-v>, <c-x> to open the selected entry in a new tab or in a new split.
"  Use <c-z> to mark/unmark multiple files and <c-o> to open them.
let g:ctrlp_map = '<C-f>'
let g:ctrlp_custom_ignore = {
  \ 'dir':  '\v[\/]\.(git|hg|svn)$',
  \ 'file': '\v\.(exe|so|dll)$'
 \ }
let g:ctrlp_regexp = 1
" -------------------for ctrlp------------------------------------"

" -------------------for auto-pairs-------------------------------"
" while file is vim or html ,add '<' complite
au FileType vim,html let g:AutoPairs = {'(':')', '[':']', '{':'}',"'":"'",'"':'"', '`':'`','<':'>'}
" -------------------for auto-pairs-------------------------------"
   
" -------------------for deomplete------------------------------"
" https://github.com/Shougo/deomplete.vim
" deoplete.nvim recommend
set completeopt+=noselect
let g:deoplete#enable_at_startup = 1
" Use smartcase.
let g:deoplete#enable_smart_case = 1
" Set minimum syntax keyword length.
let g:deoplete#auto_complete_start_length = 3
" <CR>: close popup and save indent.
"inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
"function! s:my_cr_function() abort
  "return deoplete#mappings#close_popup() . "\<CR>"
"endfunction
" <BS>: close popup and delete backword char.
inoremap <silent><expr> <CR>
\ pumvisible() ? deoplete#mappings#close_popup() :
\ "\<CR>"
inoremap <expr><C-g>  deoplete#mappings#close_popup()
inoremap <expr><BS>  deoplete#mappings#smart_close_popup()."\<C-h>"
inoremap <silent><expr> <Tab>
\ pumvisible() ? "\<C-n>" :
\ "\<TAB>"
" Enable omni completion.
autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd FileType python setlocal omnifunc=jedi#completions
autocmd FileType go setlocal omnifunc=gocode#Complete

if !exists('g:deoplete#omni#input_patterns')
  let g:deoplete#omni#input_patterns = {}
endif

" GO: By default, the classes (const, func, type, var) are not aligned in the popup menu. set align_class to 1 to aligned them.
let g:deoplete#sources#go#align_class = 1
let g:deoplete#sources#go#gocode_binary = $GOPATH.'/bin/gocode'
" Python: show docs in prev window
let g:deoplete#sources#jedi#show_docstring = 1
" -------------------for deomplete------------------------------"

" -------------------for ultisnips------------------------------"
" https://github.com/SirVer/ultisnips
" Trigger configuration. Do not use <tab> if you use https://github.com/Valloric/YouCompleteMe.
let g:UltiSnipsUsePythonVersion = 3
"let g:UltiSnipsSnippetDirectories=['UltiSnips']
let g:UltiSnipsSnippetsDir = '~/.config/nvim/UltiSnips'
let g:UltiSnipsExpandTrigger="<C-l>"
let g:UltiSnipsJumpForwardTrigger="<TAB>"
let g:UltiSnipsJumpBackwardTrigger="<S-TAB>"
" If you want :UltiSnipsEdit to split your window.
let g:UltiSnipsEditSplit="vertical"
au FileType c UltiSnipsAddFiletypes c.cpp
nnoremap <leader>us :UltiSnipsEdit<CR>
" -------------------for ultisnips------------------------------"

" -------------------------for go ------------------------------"
" https://github.com/fatih/vim-go
au FileType go nmap <leader>gr <Plug>(go-run)
au FileType go nmap <leader>gb <Plug>(go-build)
au FileType go nmap <leader>gi :GoInstall<cr>
au FileType go nmap <leader>gt <Plug>(go-test)
au FileType go nmap <leader>gc <Plug>(go-coverage)
au FileType go nmap <Leader>gs <Plug>(go-implements)
au FileType go nmap <Leader>gd <Plug>(go-doc)
"au FileType go nmap <Leader>gb <Plug>(go-doc-browser)
let g:go_highlight_functions = 1
let g:go_highlight_methods = 1
let g:go_highlight_structs = 1
let g:go_highlight_operators = 1
let g:go_highlight_build_constraints = 1 
" godef https://github.com/dgryski/vim-godef
let g:godef_split = 2
" -------------------------for go ------------------------------"

" ------------------------for easymotion -----------------------------------"
"  https://github.com/easymotion/vim-easymotion
" Gif config
map  / <Plug>(easymotion-sn)
omap / <Plug>(easymotion-tn)
" " These `n` & `N` mappings are options. You do not have to map `n` & `N` to
" EasyMotion.
" " Without these mappings, `n` & `N` works fine. (These mappings just provide
" " different highlight method and have some other features )
" map  n <Plug>(easymotion-next)
" map  N <Plug>(easymotion-prev)
let g:EasyMotion_smartcase = 0
" ------------------------for easymotion ------------------------------------"

" ------------------------for syntastic--------------------------------------"
" https://github.com/scrooloose/syntastic
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*
let g:syntastic_error_symbol             = '✗'
let g:syntastic_warning_symbol           = '⚠'
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list            = 1
let g:syntastic_auto_jump                = 3
let g:syntastic_check_on_open            = 0
let g:syntastic_check_on_wq              = 0
" for python
let g:syntastic_python_checkers = ['pylint']
let g:syntastic_python_pylint_post_args = '--msg-template="{path}:{line}:{column}:{C}: [{symbol} {msg_id}] {msg}"'
let g:syntastic_python_pylint_args = '--disable=C0303,W0141,'
" for js
let g:syntastic_javascript_checkers = ['eslint']
let g:syntastic_javascript_eslint_exec = 'eslint_d'
" for go
let g:syntastic_go_checkers = ['golint', 'go']
" Syntastic check
nnoremap <leader>sc :SyntasticCheck<CR>
" turns off all error notifiers
nnoremap <leader>sr :SyntasticReset<CR>
nnoremap <leader>se :Error<CR>
nnoremap <leader>lc :lclose<CR>
nnoremap <leader>ln :lnext<CR>
nnoremap <leader>lp :lprevious<CR>
" ------------------------for syntastic--------------------------------------"

" ------------------------for vim-expand-region------------------------------"
" https://github.com/terryma/vim-expand-region
" This selects the next closest text object.
nmap e <Plug>(expand_region_expand)
vmap e <Plug>(expand_region_expand)
" This selects the previous closest text object.
vmap <BS> <Plug>(expand_region_shrink)
let g:expand_region_text_objects = {
      \ 'i"'  :0,  'a"'  :0,
      \ 'i''' :0,  'a''' :0,
      \ 'i`'  :0,  'a`'  :0,
      \ 'i]'  :1,  'a]'  :1, 
      \ 'ib'  :1,  'ab'  :1, 
      \ 'iB'  :1,  'aB'  :1, 
      \ 'il'  :0,  'ip'  :0,
      \ 'ie'  :0 
  \ }
" ------------------------for vim-expand-region------------------------------"

" ------------------------for tabular-----------------------------------"
"  https://github.com/godlygeek/tabular
nnoremap <Leader>a :Tabularize 
vnoremap <Leader>a :Tabularize 
" ------------------------for tabular-----------------------------------"

" ------------------------for tagbar------------------------------------"
" https://github.com/majutsushi/tagbar
let g:tagbar_width = 30
let g:tagbar_type_go = {  
    \ 'ctagstype' : 'go',
    \ 'kinds'     : [
        \ 'p:package',
        \ 'i:imports:1',
        \ 'c:constants',
        \ 'v:variables',
        \ 't:types',
        \ 'n:interfaces',
        \ 'w:fields',
        \ 'e:embedded',
        \ 'm:methods',
        \ 'r:constructor',
        \ 'f:functions'],
    \ 'sro' : '.',
    \ 'kind2scope' : {'t' : 'ctype', 'n' : 'ntype'},
    \ 'scope2kind' : {'ctype' : 't', 'ntype' : 'n'},
    \ 'ctagsbin'  : 'gotags',
    \ 'ctagsargs' : '-sort -silent'}
" ------------------------for tagbar------------------------------------"

" ------------------------for gruvbox------------------------------------"
" https://github.com/morhetz/gruvbox
let g:gruvbox_contrast_dark = "hard"
" ------------------------for gruvbox------------------------------------"

" ------------------------for rainbow------------------------------------"
" https://github.com/luochen1990/rainbow
let g:rainbow_conf = {
\   'ctermfgs': [109, 208, 142, 167],
\   'operators': '_,_',
\   'parentheses': ['start=/(/ end=/)/ fold', 'start=/\[/ end=/\]/ fold', 'start=/{/ end=/}/ fold'],
\   'separately': {
\       '*': {},
\       'css': 0,
\   }
\}
let g:rainbow_active = 1
" au BufRead,BufNewFile * RainbowToggle
" ------------------------for rainbow------------------------------------"

" ------------------------for indentLine---------------------------------"
" https://github.com/Yggdroot/indentLine
let g:indentLine_char = '¦'
" ------------------------for indentLine---------------------------------"

" ------------------------for auto close preview-----------------------------"
autocmd CursorMovedI * if pumvisible() == 0|pclose|endif
autocmd InsertLeave * if pumvisible() == 0|pclose|endif
" ------------------------for auto close preview------------------------------"

" Colors-----------------------------------
syntax on
syntax enable " syntax color
set background=dark
colorscheme gruvbox
" Don't over 500
