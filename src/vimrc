filetype on
" Don't write backup file if vim is being called by "crontab -e"
au BufWrite /private/tmp/crontab.* set nowritebackup nobackup
" Don't write backup file if vim is being called by "chpass"
au BufWrite /private/etc/pw.* set nowritebackup nobackup
" set .rs file is rust
au BufNewFile,BufWrite,BufRead *.rs set filetype=rust
au BufRead,BufNewFile *.asd set filetype=lisp

" autocmd 系列
autocmd FileType python setlocal et sta sw=4 sts=4
autocmd FileType javascript setlocal et sta sw=2 sts=2

set autoread
"set guifont=Sauce\ Code\ Powerline\ Light:h18

set nocompatible        " Use Vim defaults instead of 100% vi compatibility
set backspace=2         " more powerful backspacing

set mouse=a " allow mouse
set scrolloff=10 " 光标在屏幕倒数10行时自动向下移

" 代码着色
syntax enable
syntax on

" 标签页
set tabpagemax=9
set showtabline=2


" 制表符
set tabstop=4
set expandtab
set smarttab
set shiftwidth=4
set softtabstop=4

" 缩进
set autoindent
set smartindent

" 代码折叠
"set foldmethod=marker

" 行号和标尺
set number
set ruler
set rulerformat=%15(%c%V\ %p%%%)

" 命令行于状态行
set ch=2
set ls=2 " 始终显示状态行
set wildmenu " 命令补全， 显示补全菜单
set showcmd  " 右下角显示已输入的命令

" Search Option
set hlsearch  " Highlight search things
set ignorecase " search时忽略大小写
set smartcase  " search时，如果搜索命令中有大写，则记入大小写
          
"set fenc=cp936
" English messages only
"language messages zh_CN.utf-8
set fencs=utf-8,gbk,chinese,latin1
set formatoptions+=mM
set encoding=utf-8

" ----------------------------------------------------------------------------
" -----------------------------Key Shortcut-----------------------------------
" ----------------------------------------------------------------------------
"
" -----------------------------Normal-------------------------------"
nnoremap <C-t>   :tabnew<cr>
nnoremap <C-p>   :tabprevious<cr>
nnoremap <C-n>   :tabnext<cr>
nnoremap <C-c>   :close<cr>
nnoremap <C-b>   :vsp<cr>
nnoremap <C-h>   :sp<cr>
nnoremap <silent> <C-f>   :NERDTree<cr>
" -----------------------------Normal-------------------------------"
"
" -----------------------------Insert-------------------------------"
inoremap <C-j> <ESC>o
" -----------------------------Insert-------------------------------"


" edit .vimrc file conveniently , <leader>e to edit .vimrc
map <silent> <leader>e :e $HOME/.vim/vimrc<cr>
" auto source .vimrc after writing the buffer
autocmd! bufwritepost .vimrc source $HOME/.vim/.vimrc



" ------------------------------------------------------------------------------
" ---------------------------------Plugin Manager-------------------------------
" ------------------------------------------------------------------------------
" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" " alternatively, pass a path where Vundle should install plugins
" "call vundle#begin('~/some/path/here')
" " let Vundle manage Vundle, required
" Plugin Manager
Plugin 'gmarik/Vundle.vim'
" commonlisp
" Plugin 'kovisoft/slimv'
" rust
" Plugin 'rust-lang/rust.vim'
" |-------------------go----------------------------|
" go
Plugin 'fatih/vim-go'
" when your change your GOPATH or start a new project , exec: 
"   go get -u github.com/nsf/gocode 
Plugin 'nsf/gocode', {'rtp': 'vim/'}
" a local func jamp
"     go get -v code.google.com/p/rog-go/exp/cmd/godef
"     go install -v code.google.com/p/rog-go/exp/cmd/godef
Plugin 'dgryski/vim-godef'
" python
" Plugin 'klen/python-mode'
" |-------------------------------------------------|
"
" |-------------------comman------------------------|
" neocomplete
Plugin 'Shougo/neocomplete.vim'
Plugin 'Shougo/neosnippet'
Plugin 'Shougo/neosnippet-snippets'
" Track the engine.
"Plugin 'SirVer/ultisnips'
" Snippets are separated from the engine. Add this if you want them:
Plugin 'honza/vim-snippets'
" 注释
Plugin 'scrooloose/nerdcommenter'
" 代码提示
Plugin 'vim-scripts/AutoComplPop'
" 文件树
Plugin 'scrooloose/nerdtree'
" add surrounding char for a word
" ys -> create surround  + range [iw, aw, i], i), i", i', ip] + sigal
" cs -> change surround  + origin_sigal + new_sigal
" ds -> delete surround  + sigal
Plugin 'tpope/vim-surround'
" rename {new name}
Plugin 'danro/rename.vim'
Plugin 'bling/vim-airline'
Plugin 'easymotion/vim-easymotion'
" 括号
Plugin 'jiangmiao/auto-pairs'
" |-------------------------------------------------|
"
" |-------------------------js----------------------|
" jsfmt :
"   it dependence: npm install -g jsfmt
"Plugin 'mephux/vim-jsfmt'
" js更漂亮
Plugin 'pangloss/vim-javascript'
" |-------------------------------------------------|
"
" " All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required
" " To ignore plugin indent changes, instead use:
" "filetype plugin on
" "
" " Brief help
" " :PluginList       - lists configured plugins
" " :PluginInstall    - installs plugins; append `!` to update or just
" :PluginUpdate
" " :PluginSearch foo - searches for foo; append `!` to refresh local cache
" " :PluginClean      - confirms removal of unused plugins; append `!` to
" auto-approve removal
" "
" " see :h vundle for more details or wiki for FAQ
" " Put your non-Plugin stuff after this line
"

" -------------------for airline------------------------------"
let g:airline_powerline_fonts = 1
let g:airline_theme = "murmur"
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#left_sep = ' '
let g:airline#extensions#tabline#left_alt_sep = '|'
function! AirlineInit()
let g:airline_section_a = airline#section#create(['mode', ' ', '♪'])
let g:airline_section_b = airline#section#create_left(['PWD','%{getcwd()}'])
let g:airline_section_c = airline#section#create_left(['FILE','file'])
endfunction
autocmd User AirlineAfterInit call AirlineInit()
" -------------------for airline------------------------------"
"
" -------------------for nerdtree------------------------------"
" https://github.com/scrooloose/nerdtree
"
let NERDTreeShowLineNumbers=1
let NERDTreeMouseMode=2
let NERDTreeBookmarksSort=1
let NERDTreeShowBookmarks=1
" start nerdtree when vim startup if no file is open
"autocmd StdinReadPre * let s:std_in=1
"autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif
"
" close nerdtree if nerdtree is the only window in vim
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
" -------------------for nerdtree------------------------------"
"
" -------------------for auto-pairs-------------------------------"
let g:AutoPairsShortcutJump='<C-l>'
" while file is vim or html ,add '<' complite
au FileType vim,html let g:AutoPairs = {'(':')', '[':']', '{':'}',"'":"'",'"':'"', '`':'`','<':'>'}
" -------------------for auto-pairs-------------------------------"
"
" -------------------for neocomplete------------------------------"
" https://github.com/Shougo/neocomplete.vim
let g:neocomplete#enable_at_startup = 1
" Disable AutoComplPop.
let g:acp_enableAtStartup = 0
" Use smartcase.
let g:neocomplete#enable_smart_case = 1
" Enable omni completion.
autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
inoremap <expr><TAB> pumvisible() ? "\<C-n>" : "\<TAB>"

setlocal omnifunc=gocode#Complete
" -------------------for neocomplete------------------------------"

" -------------------for neosnippet------------------------------"
" Plugin key-mappings.
imap <C-k>     <Plug>(neosnippet_expand_or_jump)
smap <C-k>     <Plug>(neosnippet_expand_or_jump)
xmap <C-k>     <Plug>(neosnippet_expand_target)

 " SuperTab like snippets behavior.
"imap <expr><TAB>
"\ pumvisible() ? 
"\ "\<C-n>" : neosnippet#expandable_or_jumpable() ?
"\ "\<TAB>": "\<Plug>(neosnippet_expand_or_jump)"
smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
\ "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"

 " For conceal markers.
if has('conceal')
  set conceallevel=2 concealcursor=niv
endif
" "
" -------------------for neosnippet------------------------------"
"
" -------------------------for go ------------------------------"
" https://github.com/fatih/vim-go
au FileType go nmap <leader>r <Plug>(go-run)
au FileType go nmap <leader>b <Plug>(go-build)
au FileType go nmap <leader>i :GoInstall<cr>
au FileType go nmap <leader>t <Plug>(go-test)
au FileType go nmap <leader>c <Plug>(go-coverage)
au FileType go nmap <Leader>s <Plug>(go-implements)
au FileType go nmap <Leader>gd <Plug>(go-doc)
au FileType go nmap <Leader>gb <Plug>(go-doc-browser)
let g:go_highlight_functions = 1
let g:go_highlight_methods = 1
let g:go_highlight_structs = 1
let g:go_highlight_operators = 1
let g:go_highlight_build_constraints = 1 
" godef https://github.com/dgryski/vim-godef
let g:godef_split = 2
" -------------------------for go ------------------------------"
"
" ------------------------for easymotion ------------------------------------"
"  https://github.com/easymotion/vim-easymotion
" Gif config
map  / <Plug>(easymotion-sn)
omap / <Plug>(easymotion-tn)
"
" " These `n` & `N` mappings are options. You do not have to map `n` & `N` to
" EasyMotion.
" " Without these mappings, `n` & `N` works fine. (These mappings just provide
" " different highlight method and have some other features )
map  n <Plug>(easymotion-next)
map  N <Plug>(easymotion-prev)
let g:EasyMotion_smartcase = 1
" ------------------------for easymotion ------------------------------------"
"
" ------------------------for auto close preview--------------------------------"
autocmd CursorMovedI * if pumvisible() == 0|pclose|endif
autocmd InsertLeave * if pumvisible() == 0|pclose|endif
" ------------------------for auto close preview--------------------------------"
"
